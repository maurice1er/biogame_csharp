// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using biochallenge.DB;

#nullable disable

namespace biochallenge.Migrations
{
    [DbContext(typeof(Database))]
    [Migration("20230509185449_migration002")]
    partial class migration002
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("biochallenge.Models.Challenge", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChallengedId")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.Property<string>("ChallengerId")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("EndAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStarted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LaunchedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("WinnerId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ChallengedId");

                    b.HasIndex("ChallengerId");

                    b.HasIndex("WinnerId");

                    b.ToTable("Challenges");

                    b.HasData(
                        new
                        {
                            Id = "5310272a-3104-4adc-a245-09127a240f62",
                            ChallengedId = "83a815e1-452f-4fb3-9123-3618d6c965da",
                            ChallengerId = "75cc7325-20c1-4c0e-a8ab-15f0f36eb288",
                            IsFinished = false,
                            IsStarted = false
                        });
                });

            modelBuilder.Entity("biochallenge.Models.Option", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options");

                    b.HasData(
                        new
                        {
                            Id = "930c76c9-c411-49aa-90e0-ba0e81fb978b",
                            Answer = "Answer 1",
                            IsCorrect = false,
                            QuestionId = "8eac2a6d-77a7-410f-8d5a-d650ea85a5db"
                        },
                        new
                        {
                            Id = "c1eeddd5-c8d8-415e-9a5b-f16fdcbe8522",
                            Answer = "Answer 2",
                            IsCorrect = false,
                            QuestionId = "8eac2a6d-77a7-410f-8d5a-d650ea85a5db"
                        },
                        new
                        {
                            Id = "2fa0719b-2337-4dce-833d-bc83ee1384d1",
                            Answer = "Answer 3",
                            IsCorrect = true,
                            QuestionId = "8eac2a6d-77a7-410f-8d5a-d650ea85a5db"
                        });
                });

            modelBuilder.Entity("biochallenge.Models.Participant", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Participants");

                    b.HasData(
                        new
                        {
                            Id = "83a815e1-452f-4fb3-9123-3618d6c965da",
                            Score = 2.0
                        },
                        new
                        {
                            Id = "75cc7325-20c1-4c0e-a8ab-15f0f36eb288",
                            Score = 1.0
                        });
                });

            modelBuilder.Entity("biochallenge.Models.Question", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ChallengeId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Hint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Quiz")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = "8eac2a6d-77a7-410f-8d5a-d650ea85a5db",
                            Duration = 10,
                            Hint = "",
                            Quiz = "Quiz 1"
                        });
                });

            modelBuilder.Entity("biochallenge.Models.Challenge", b =>
                {
                    b.HasOne("biochallenge.Models.Participant", "Challenged")
                        .WithMany()
                        .HasForeignKey("ChallengedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("biochallenge.Models.Participant", "Challenger")
                        .WithMany()
                        .HasForeignKey("ChallengerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("biochallenge.Models.Participant", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Challenged");

                    b.Navigation("Challenger");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("biochallenge.Models.Option", b =>
                {
                    b.HasOne("biochallenge.Models.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("biochallenge.Models.Question", b =>
                {
                    b.HasOne("biochallenge.Models.Challenge", null)
                        .WithMany("Quiz")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("biochallenge.Models.Challenge", b =>
                {
                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("biochallenge.Models.Question", b =>
                {
                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
